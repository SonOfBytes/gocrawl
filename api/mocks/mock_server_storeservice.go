// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sonofbytes/gocrawl/api/server (interfaces: StoreService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStoreService is a mock of StoreService interface
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStoreService) Get(arg0 context.Context, arg1, arg2 string) ([]string, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreServiceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreService)(nil).Get), arg0, arg1, arg2)
}

// SetConnection mocks base method
func (m *MockStoreService) SetConnection(arg0 string) error {
	ret := m.ctrl.Call(m, "SetConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnection indicates an expected call of SetConnection
func (mr *MockStoreServiceMockRecorder) SetConnection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockStoreService)(nil).SetConnection), arg0)
}
