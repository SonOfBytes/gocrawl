// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authentication/pb/authenticate.proto

/*
Package authpb is a generated protocol buffer package.

It is generated from these files:
	authentication/pb/authenticate.proto

It has these top-level messages:
	AuthenticateRequest
	AuthenticateReply
	ValidateRequest
	ValidateReply
*/
package authpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthenticateRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthenticateRequest) Reset()                    { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()               {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthenticateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthenticateReply struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *AuthenticateReply) Reset()                    { *m = AuthenticateReply{} }
func (m *AuthenticateReply) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateReply) ProtoMessage()               {}
func (*AuthenticateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthenticateReply) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type ValidateRequest struct {
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ValidateRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type ValidateReply struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *ValidateReply) Reset()                    { *m = ValidateReply{} }
func (m *ValidateReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateReply) ProtoMessage()               {}
func (*ValidateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ValidateReply) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*AuthenticateRequest)(nil), "AuthenticateRequest")
	proto.RegisterType((*AuthenticateReply)(nil), "AuthenticateReply")
	proto.RegisterType((*ValidateRequest)(nil), "ValidateRequest")
	proto.RegisterType((*ValidateReply)(nil), "ValidateReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Authentication service

type AuthenticationClient interface {
	// Sends a authentication request
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error)
	// Sends a validaton request
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error)
}

type authenticationClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationClient(cc *grpc.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error) {
	out := new(AuthenticateReply)
	err := grpc.Invoke(ctx, "/Authentication/Authenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error) {
	out := new(ValidateReply)
	err := grpc.Invoke(ctx, "/Authentication/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Authentication service

type AuthenticationServer interface {
	// Sends a authentication request
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateReply, error)
	// Sends a validaton request
	Validate(context.Context, *ValidateRequest) (*ValidateReply, error)
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authentication/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Authentication_Authenticate_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Authentication_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication/pb/authenticate.proto",
}

func init() { proto.RegisterFile("authentication/pb/authenticate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0x2c, 0x2d, 0xc9,
	0x48, 0xcd, 0x2b, 0xc9, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x48, 0xd2, 0x47, 0x12,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xf2, 0xe5, 0x12, 0x76, 0x44, 0x12, 0x0d, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x28, 0x2d, 0x4e, 0x2d, 0xca, 0x4b, 0xcc,
	0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x41, 0x72, 0x05, 0x89, 0xc5, 0xc5,
	0xe5, 0xf9, 0x45, 0x29, 0x12, 0x4c, 0x10, 0x39, 0x18, 0x5f, 0x49, 0x97, 0x4b, 0x10, 0xd5, 0xb8,
	0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd4, 0xe2, 0xe2, 0xcc, 0xfc, 0x3c, 0xa8, 0x59,
	0x30, 0xae, 0x92, 0x36, 0x17, 0x7f, 0x58, 0x62, 0x4e, 0x66, 0x0a, 0x92, 0xcd, 0xb8, 0x15, 0xab,
	0x72, 0xf1, 0x22, 0x14, 0x83, 0xcc, 0x15, 0xe1, 0x62, 0x2d, 0x03, 0x09, 0x80, 0x15, 0x72, 0x04,
	0x41, 0x38, 0x46, 0x35, 0x5c, 0x7c, 0x8e, 0x28, 0x3e, 0x17, 0xb2, 0xe2, 0xe2, 0x41, 0x76, 0x94,
	0x90, 0x88, 0x1e, 0x16, 0x2f, 0x4b, 0x09, 0xe9, 0x61, 0xb8, 0x5c, 0x89, 0x41, 0x48, 0x8f, 0x8b,
	0x03, 0x66, 0xa9, 0x90, 0x80, 0x1e, 0x9a, 0x63, 0xa5, 0xf8, 0xf4, 0x50, 0x5c, 0xa4, 0xc4, 0xe0,
	0xc4, 0x11, 0xc5, 0x06, 0x0a, 0xe5, 0x82, 0xa4, 0x24, 0x36, 0x70, 0x00, 0x1b, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0xda, 0xfd, 0x50, 0x88, 0x01, 0x00, 0x00,
}
