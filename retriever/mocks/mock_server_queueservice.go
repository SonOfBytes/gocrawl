// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sonofbytes/gocrawl/retriever/server (interfaces: QueueService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQueueService is a mock of QueueService interface
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockQueueService) Get(arg0 context.Context, arg1 string) (string, int, string, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get
func (mr *MockQueueServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueueService)(nil).Get), arg0, arg1)
}

// SetConnection mocks base method
func (m *MockQueueService) SetConnection(arg0 string) error {
	ret := m.ctrl.Call(m, "SetConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnection indicates an expected call of SetConnection
func (mr *MockQueueServiceMockRecorder) SetConnection(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnection", reflect.TypeOf((*MockQueueService)(nil).SetConnection), arg0)
}

// Submit mocks base method
func (m *MockQueueService) Submit(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 string) error {
	ret := m.ctrl.Call(m, "Submit", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit
func (mr *MockQueueServiceMockRecorder) Submit(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockQueueService)(nil).Submit), arg0, arg1, arg2, arg3, arg4)
}
